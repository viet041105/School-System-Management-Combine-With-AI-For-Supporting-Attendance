@{
    Layout = "~/Views/Shared/_Layout_School.cshtml";
    ViewBag.Title = "Quản lý Môn học";
}

<head>
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.14.1/themes/base/jquery-ui.css">
    <script src="https://code.jquery.com/jquery-3.7.1.js"></script>
    <script src="https://code.jquery.com/ui/1.14.1/jquery-ui.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.2.3/css/bootstrap.min.css">
    <style>
        @@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap');

        * {
            font-family: 'Poppins', sans-serif;
            box-sizing: border-box;
        }

        .container-custom {
            background: white;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0px 10px 30px rgba(0, 0, 0, 0.3);
            width: 100%;
            max-width: 2100px;
            animation: fadeIn 1s ease-in-out;
            margin: 0 auto;
        }

        @@keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(-20px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        h2 {
            text-align: center;
            color: #333;
            font-weight: 600;
            margin-bottom: 20px;
        }

        .btn-add {
            background: linear-gradient(to right, #4776E6, #8E54E9);
            color: white;
            padding: 10px 18px;
            border: none;
            border-radius: 8px;
            text-decoration: none;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(71, 118, 230, 0.3);
        }

            .btn-add:hover {
                background: linear-gradient(to right, #8E54E9, #4776E6);
                transform: translateY(-2px);
                box-shadow: 0 6px 18px rgba(71, 118, 230, 0.4);
                cursor: pointer;
            }

        .search-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .search-box {
            position: relative;
            flex-grow: 1;
            max-width: 360px;
        }

        .search-input {
            width: 100%;
            padding: 10px 15px 10px 40px;
            border-radius: 30px;
            border: 1px solid #ddd;
            box-shadow: 0 2px 10px rgba(0,0,0,0.08);
            transition: all 0.3s;
            font-size: 14px;
        }

            .search-input:focus {
                outline: none;
                border-color: #4776E6;
                box-shadow: 0 2px 15px rgba(71, 118, 230, 0.25);
            }

        .search-icon {
            position: absolute;
            left: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: #8E54E9;
        }

        .table-responsive {
            width: 100%;
            overflow-x: auto;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            min-width: 800px;
        }

        th, td {
            padding: 15px;
            text-align: center;
            font-size: 14px;
            border-bottom: 1px solid #ddd;
        }

        th {
            background: linear-gradient(to right, #4776E6, #8E54E9);
            color: white;
            font-weight: bold;
        }

        tr:hover {
            background: #f8f9fa;
            transition: 0.3s;
        }

        .btn-action {
            padding: 7px 14px;
            border-radius: 6px;
            font-size: 13px;
            font-weight: 500;
            border: none;
            transition: all 0.3s ease;
            text-decoration: none;
            margin: 0 3px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
        }

        .btn-edit {
            background: linear-gradient(to right, #11998e, #38ef7d);
            color: white;
            box-shadow: 0 2px 8px rgba(17, 153, 142, 0.3);
        }

            .btn-edit:hover {
                background: linear-gradient(to right, #38ef7d, #11998e);
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(17, 153, 142, 0.4);
            }

        .btn-delete {
            background: linear-gradient(to right, #ED213A, #FF8177);
            color: white;
            box-shadow: 0 2px 8px rgba(237, 33, 58, 0.3);
        }

            .btn-delete:hover {
                background: linear-gradient(to right, #FF8177, #ED213A);
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(237, 33, 58, 0.4);
            }

        .btn-icon {
            margin-right: 6px;
        }

        /* Dialog overlay styles */
        .dialog-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.6);
            backdrop-filter: blur(3px);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 9999;
        }

        /* Dialog box styles */
        .dialog-box {
            background: white;
            padding: 25px;
            border-radius: 12px;
            width: 350px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
        }

            .dialog-box h3 {
                margin-top: 0;
                margin-bottom: 15px;
                font-weight: 600;
                color: #333;
                display: flex;
                align-items: center;
            }

                .dialog-box h3 i {
                    margin-right: 10px;
                    color: #8E54E9;
                }

            .dialog-box label {
                margin-top: 10px;
                margin-bottom: 5px;
                font-weight: 500;
                color: #555;
            }

            .dialog-box input,
            .dialog-box select {
                width: 100%;
                padding: 10px 12px;
                margin: 5px 0 12px;
                border-radius: 8px;
                border: 1px solid #ddd;
                font-size: 14px;
                color: #333;
                background-color: #fff;
                transition: all 0.3s;
            }

                .dialog-box input:focus,
                .dialog-box select:focus {
                    outline: none;
                    border-color: #8E54E9;
                    box-shadow: 0 0 0 2px rgba(142, 84, 233, 0.2);
                }

        .dialog-buttons {
            display: flex;
            justify-content: space-between;
            margin-top: 20px;
        }

        .btn-dialog {
            padding: 10px 18px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.3s ease;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .btn-save {
            background: linear-gradient(to right, #11998e, #38ef7d);
            box-shadow: 0 4px 10px rgba(17, 153, 142, 0.3);
        }

            .btn-save:hover {
                background: linear-gradient(to right, #38ef7d, #11998e);
                transform: translateY(-2px);
                box-shadow: 0 6px 15px rgba(17, 153, 142, 0.4);
            }

        .btn-cancel {
            background: linear-gradient(to right, #ED213A, #FF8177);
            box-shadow: 0 4px 10px rgba(237, 33, 58, 0.3);
        }

            .btn-cancel:hover {
                background: linear-gradient(to right, #FF8177, #ED213A);
                transform: translateY(-2px);
                box-shadow: 0 6px 15px rgba(237, 33, 58, 0.4);
            }

        .btn-delete-confirm {
            background: linear-gradient(to right, #ED213A, #FF8177);
            box-shadow: 0 4px 10px rgba(237, 33, 58, 0.3);
        }

            .btn-delete-confirm:hover {
                background: linear-gradient(to right, #FF8177, #ED213A);
                transform: translateY(-2px);
                box-shadow: 0 6px 15px rgba(237, 33, 58, 0.4);
            }

        .btn-icon-dialog {
            margin-right: 8px;
        }

        .dialog-alert {
            color: #777;
            font-size: 14px;
            margin-top: 15px;
            text-align: center;
        }

        /* Toast notification system */
        .toast-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 10000;
            width: 350px;
        }

        .toast-notification {
            background: white;
            border-radius: 8px;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.3);
            padding: 15px;
            margin-bottom: 15px;
            transform: translateX(150%);
            transition: transform 0.5s cubic-bezier(0.175, 0.885, 0.32, 1.275);
            display: flex;
            align-items: flex-start;
            overflow: hidden;
            position: relative;
        }

            .toast-notification.show {
                transform: translateX(0);
            }

        .toast-icon {
            min-width: 24px;
            height: 24px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 15px;
            font-size: 14px;
        }

        .toast-success .toast-icon {
            background: linear-gradient(to right, #11998e, #38ef7d);
            color: white;
        }

        .toast-error .toast-icon {
            background: linear-gradient(to right, #ED213A, #FF8177);
            color: white;
        }

        .toast-info .toast-icon {
            background: linear-gradient(to right, #4776E6, #8E54E9);
            color: white;
        }

        .toast-content {
            flex-grow: 1;
        }

        .toast-title {
            font-weight: 600;
            font-size: 15px;
            margin-bottom: 3px;
            color: #333;
        }

        .toast-message {
            font-size: 13px;
            color: #666;
        }

        .toast-close {
            cursor: pointer;
            padding: 5px;
            line-height: 1;
            margin-left: 15px;
            font-size: 18px;
            color: #aaa;
            transition: color 0.3s;
        }

            .toast-close:hover {
                color: #333;
            }

        .toast-progress {
            position: absolute;
            bottom: 0;
            left: 0;
            height: 3px;
            width: 100%;
            background: #ddd;
        }

        .toast-progress-bar {
            height: 100%;
            width: 100%;
        }

        .toast-success .toast-progress-bar {
            background: linear-gradient(to right, #11998e, #38ef7d);
        }

        .toast-error .toast-progress-bar {
            background: linear-gradient(to right, #ED213A, #FF8177);
        }

        .toast-info .toast-progress-bar {
            background: linear-gradient(to right, #4776E6, #8E54E9);
        }

        /* Responsive styles */
        @@media only screen and (max-width: 768px) {
            .container-custom {
                padding: 20px;
                margin: 10px;
            }

            h2 {
                font-size: 20px;
                margin-bottom: 15px;
            }

            th, td {
                padding: 10px;
                font-size: 12px;
            }

            .btn-add {
                padding: 8px 12px;
                font-size: 12px;
            }

            .dialog-box {
                width: 90%;
                padding: 15px;
            }

            .search-container {
                flex-direction: column;
                align-items: flex-start;
            }

            .search-box {
                width: 100%;
                max-width: 100%;
                margin-bottom: 15px;
            }

            .table-responsive {
                overflow-x: auto;
            }

            .toast-container {
                width: 90%;
                right: 5%;
            }
        }
    </style>
</head>
<body>
    <div class="container-custom" id="container-view">

        <h2><i class="fas fa-book"></i> Subject List</h2>

        <!-- Search container with search on left and add button on right -->
        <div class="search-container">
            <div class="search-box">
                <i class="fas fa-search search-icon"></i>
                <input type="text" id="subjectSearchInput" class="search-input" placeholder="Search subjects..." oninput="filterSubjects()">
            </div>
            <button class="btn-add" onclick="openCreateDialog()">
                <i class="fas fa-plus-circle" style="margin-right: 5px;"></i> Create Subject
            </button>
        </div>

        <div class="table-responsive">
            <table class="table subject-table" id="subject-table">
                <thead>
                    <tr>
                        <th>Order</th>
                        <th>Subject Name</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Data will be loaded via Fetch -->
                </tbody>
            </table>
        </div>
    </div>

    <!-- Create Dialog -->
    <div id="createDialog" style="display:none;" class="dialog-overlay">
        <div class="dialog-box">
            <h3><i class="fas fa-plus-circle"></i> Create Subject</h3>
            <form id="createForm">
                <label>Subject Name:</label>
                <input type="text" id="newSubjectName" required placeholder="Enter subject name" />

                <div class="dialog-buttons">
                    <button type="submit" class="btn-dialog btn-save">
                        <i class="fas fa-save btn-icon-dialog"></i> Create
                    </button>
                    <button type="button" class="btn-dialog btn-cancel" onclick="$('#createDialog').hide()">
                        <i class="fas fa-times btn-icon-dialog"></i> Cancel
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Edit Dialog -->
    <div id="editDialog" style="display:none;" class="dialog-overlay">
        <div class="dialog-box">
            <h3><i class="fas fa-edit"></i> Edit Subject</h3>
            <form id="editForm">
                <input type="hidden" id="subjectIdEdit" />
                <label>Subject Name:</label>
                <input type="text" id="subjectNameEdit" required placeholder="Enter subject name" />
                <div class="dialog-buttons">
                    <button type="submit" class="btn-dialog btn-save">
                        <i class="fas fa-save btn-icon-dialog"></i> Save
                    </button>
                    <button type="button" class="btn-dialog btn-cancel" onclick="$('#editDialog').hide()">
                        <i class="fas fa-times btn-icon-dialog"></i> Cancel
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Delete Dialog -->
    <div id="deleteDialog" style="display:none;" class="dialog-overlay">
        <div class="dialog-box">
            <h3><i class="fas fa-trash-alt"></i> Delete Subject</h3>
            <input type="hidden" id="subjectIdDelete" />
            <label>Subject Name:</label>
            <input type="text" id="subjectNameDelete" readonly />
            <div class="dialog-alert">
                <i class="fas fa-exclamation-triangle" style="color: #ED213A;"></i>
                Are you sure you want to delete this subject?
            </div>
            <div class="dialog-buttons">
                <button class="btn-dialog btn-delete-confirm" onclick="confirmDelete()">
                    <i class="fas fa-trash-alt btn-icon-dialog"></i> Delete
                </button>
                <button class="btn-dialog btn-cancel" onclick="$('#deleteDialog').hide()">
                    <i class="fas fa-times btn-icon-dialog"></i> Cancel
                </button>
            </div>
        </div>
    </div>
    <!-- Toast Notification Container -->
    <div class="toast-container" id="toastContainer"></div>
    @section Scripts {
        <script>
                // Toast notification system
            function showToast(type, title, message, duration = 4000) {
                const toastContainer = document.getElementById('toastContainer');

                // Create toast element
                const toast = document.createElement('div');
                toast.className = `toast-notification toast-${type}`;

                // Set toast content based on type
                let iconClass = 'fas fa-info-circle';
                if (type === 'success') iconClass = 'fas fa-check-circle';
                if (type === 'error') iconClass = 'fas fa-exclamation-circle';

                toast.innerHTML = `
                    <div class="toast-icon">
                        <i class="${iconClass}"></i>
                    </div>
                    <div class="toast-content">
                        <div class="toast-title">${title}</div>
                        <div class="toast-message">${message}</div>
                    </div>
                    <div class="toast-close" onclick="this.parentElement.remove()">
                        <i class="fas fa-times"></i>
                    </div>
                    <div class="toast-progress">
                        <div class="toast-progress-bar"></div>
                    </div>
                `;

                // Add toast to container
                toastContainer.appendChild(toast);

                // Show toast with animation
                setTimeout(() => {
                    toast.classList.add('show');
                }, 50);

                // Animate progress bar
                const progressBar = toast.querySelector('.toast-progress-bar');
                progressBar.style.transition = `width ${duration}ms linear`;

                setTimeout(() => {
                    progressBar.style.width = '0%';
                }, 100);

                // Auto remove toast after duration
                setTimeout(() => {
                    toast.classList.remove('show');
                    setTimeout(() => {
                        toast.remove();
                    }, 500);
                }, duration);
            }

            function filterSubjects() {
                const input = document.getElementById('subjectSearchInput');
                const filter = input.value.toLowerCase();
                const table = document.getElementById('subject-table');
                const rows = table.querySelectorAll('tbody tr');

                rows.forEach(row => {
                    const subjectNameCell = row.cells[1]; // Cột Subject Name
                    if (subjectNameCell) {
                        const text = subjectNameCell.textContent.toLowerCase();
                        row.style.display = text.includes(filter) ? '' : 'none';
                    }
                });
            }
            document.addEventListener('DOMContentLoaded', function () {
                loadSubjects();
            });

            function loadSubjects() {
                // Gọi API để lấy danh sách môn học
                fetch('http://localhost:5243/api/Subject/GetAll', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => {
                    if (!response.ok) throw new Error('Network response was not ok (subjects)');
                    return response.json();
                })
                .then(data => {
                    console.log(JSON.stringify(data));
                    populateSubjects(data);
                })
                .catch(error => {
                    console.error("Error fetching subjects: " + error);
                    showToast('error', 'Load Failed', 'Unable to load subject list. Please try again later.', 5000);
                });
            }

            function populateSubjects(data) {
                const subjectTableBody = document.querySelector('#subject-table tbody');
                let subjectRows = '';

                if (!Array.isArray(data)) {
                    showToast('error', 'Invalid Data', 'API returned invalid subject data format.', 5000);
                    return;
                }

                data.forEach((subjectItem, index) => {
                    const row =
                        `<tr>
                            <td>${index + 1}</td>
                            <td>${subjectItem.sbName}</td>
                            <td>
                                <button class="btn-action btn-edit" onclick="openEditDialog('${subjectItem.sbId}', '${subjectItem.sbName}')">
                                    <i class="fas fa-edit btn-icon"></i> Edit
                                </button>
                                <button class="btn-action btn-delete" onclick="openDeleteDialog('${subjectItem.sbId}', '${subjectItem.sbName}')">
                                    <i class="fas fa-trash-alt btn-icon"></i> Delete
                                </button>
                            </td>
                        </tr>`;
                    subjectRows += row;
                });
                subjectTableBody.innerHTML = subjectRows || '<tr><td colspan="3">Không có môn học</td></tr>';
            }

            function openCreateDialog() {
                $("#newSubjectName").val('');
                $("#createDialog").show();
            }

            // Tạo môn học mới từ create dialog
            document.getElementById("createForm").addEventListener("submit", function(e) {
                e.preventDefault();

                const newSubject = {
                    SbName: $("#newSubjectName").val()
                };

                fetch('http://localhost:5243/api/Subject/Create', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(newSubject)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showToast('success', 'Subject Created', data.message, 4000);
                        $("#createDialog").hide();
                        loadSubjects();
                    } else {
                        showToast('error', 'Creation Failed', data.message || 'Failed to create subject', 5000);
                    }
                })
                .catch(error => {
                    console.error("Error creating subject:", error);
                    showToast('error', 'System Error', 'An unexpected error occurred while creating the subject.', 5000);
                });
            });

            function openEditDialog(subjectId, subjectName) {
                $("#subjectIdEdit").val(subjectId);
                $("#subjectNameEdit").val(subjectName);
                $("#editDialog").show();
            }

            // Chỉnh sửa môn học từ edit dialog
            document.getElementById("editForm").addEventListener("submit", function(e) {
                e.preventDefault();

                const subjectId = $("#subjectIdEdit").val();
                const updatedSubject = {
                    SbName: $("#subjectNameEdit").val()
                };

                fetch(`http://localhost:5243/api/Subject/Edit/${subjectId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(updatedSubject)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showToast('success', 'Subject Updated', data.message, 4000);
                        $("#editDialog").hide();
                        loadSubjects();
                    } else {
                        showToast('error', 'Update Failed', data.message || 'Failed to update subject', 5000);
                    }
                })
                .catch(error => {
                    console.error("Lỗi khi cập nhật môn học:", error);
                    showToast('error', 'System Error', 'An unexpected error occurred while updating the subject.', 5000);
                });
            });

            function openDeleteDialog(subjectId, subjectName) {
                $("#subjectIdDelete").val(subjectId);
                $("#subjectNameDelete").val(subjectName);
                $("#deleteDialog").show();
            }

            // Xác nhận xóa môn học
            function confirmDelete() {
                const subjectId = $("#subjectIdDelete").val();

                fetch(`http://localhost:5243/api/Subject/Delete/${subjectId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showToast('success', 'Subject Deleted', data.message, 4000);
                        $("#deleteDialog").hide();
                        loadSubjects();
                    } else {
                        showToast('error', 'Deletion Failed', data.message || 'Failed to delete subject', 5000);
                    }
                })
                .catch(error => {
                    console.error("Lỗi khi xóa môn học:", error);
                    showToast('error', 'System Error', 'An unexpected error occurred while deleting the subject.', 5000);
                });
            }
        </script>
    }
</body>


