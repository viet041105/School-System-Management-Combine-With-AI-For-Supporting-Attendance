@{
    Layout = "~/Views/Shared/_Layout_School.cshtml";
    ViewBag.Title = "Trang chủ";
}

@using Backendd.ModelFromDB
@using Backendd.DTOs

<head>
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.14.1/themes/base/jquery-ui.css">
    <script src="https://code.jquery.com/jquery-3.7.1.js"></script>
    <script src="https://code.jquery.com/ui/1.14.1/jquery-ui.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.2.3/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
    <style>
        @@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap');

        * {
            font-family: 'Poppins', sans-serif;
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            background-color: #f7f7f7;
            color: #333;
        }

        .container-custom {
            background: white;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0px 10px 30px rgba(0, 0, 0, 0.3);
            width: 100%;
            max-width: 2100px;
            animation: fadeIn 1s ease-in-out;
            margin: 0 auto;
        }

        @@keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(-20px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        h2 {
            text-align: center;
            color: #333;
            font-weight: 600;
            margin-bottom: 20px;
        }

        .btn-add {
            background: linear-gradient(to right, #4776E6, #8E54E9);
            color: white;
            padding: 10px 18px;
            border: none;
            border-radius: 8px;
            text-decoration: none;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(71, 118, 230, 0.3);
        }

            .btn-add:hover {
                background: linear-gradient(to right, #8E54E9, #4776E6);
                transform: translateY(-2px);
                box-shadow: 0 6px 18px rgba(71, 118, 230, 0.4);
                cursor: pointer;
            }

        .search-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .search-box {
            position: relative;
            flex-grow: 1;
            max-width: 360px;
        }

        .search-input {
            width: 100%;
            padding: 10px 15px 10px 40px;
            border-radius: 30px;
            border: 1px solid #ddd;
            box-shadow: 0 2px 10px rgba(0,0,0,0.08);
            transition: all 0.3s;
            font-size: 14px;
        }

            .search-input:focus {
                outline: none;
                border-color: #4776E6;
                box-shadow: 0 2px 15px rgba(71, 118, 230, 0.25);
            }

        .search-icon {
            position: absolute;
            left: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: #8E54E9;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            min-width: 800px;
        }

        th, td {
            padding: 15px;
            text-align: center;
            font-size: 14px;
            border-bottom: 1px solid #ddd;
        }

        th {
            background: linear-gradient(to right, #4776E6, #8E54E9);
            color: white;
            font-weight: bold;
        }

        tr:hover {
            background: #f8f9fa;
            transition: 0.3s;
            cursor: pointer;
        }

        .btn-action {
            padding: 7px 14px;
            border-radius: 6px;
            font-size: 13px;
            font-weight: 500;
            border: none;
            transition: all 0.3s ease;
            text-decoration: none;
            margin: 0 3px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            color: white;
        }

        .btn-edit {
            background: linear-gradient(to right, #11998e, #38ef7d);
            color: white;
            box-shadow: 0 2px 8px rgba(17, 153, 142, 0.3);
        }

            .btn-edit:hover {
                background: linear-gradient(to right, #38ef7d, #11998e);
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(17, 153, 142, 0.4);
            }

        .btn-delete {
            background: linear-gradient(to right, #ED213A, #FF8177);
            color: white;
            box-shadow: 0 2px 8px rgba(237, 33, 58, 0.3);
        }

            .btn-delete:hover {
                background: linear-gradient(to right, #FF8177, #ED213A);
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(237, 33, 58, 0.4);
            }

        .btn-icon {
            margin-right: 6px;
        }

        .dialog-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.6);
            backdrop-filter: blur(3px);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 9999;
        }

        .dialog-box {
            background: white;
            padding: 25px;
            border-radius: 12px;
            width: 350px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
        }

            .dialog-box h3 {
                margin-top: 0;
                margin-bottom: 15px;
                font-weight: 600;
                color: #333;
                display: flex;
                align-items: center;
            }

                .dialog-box h3 i {
                    margin-right: 10px;
                    color: #8E54E9;
                }

            .dialog-box label {
                margin-top: 10px;
                margin-bottom: 5px;
                font-weight: 500;
                color: #555;
            }

            .dialog-box input,
            .dialog-box select {
                width: 100%;
                padding: 10px 12px;
                margin: 5px 0 12px;
                border-radius: 8px;
                border: 1px solid #ddd;
                font-size: 14px;
                color: #333;
                background-color: #fff;
                transition: all 0.3s;
            }

                .dialog-box input:focus,
                .dialog-box select:focus {
                    outline: none;
                    border-color: #8E54E9;
                    box-shadow: 0 0 0 2px rgba(142, 84, 233, 0.2);
                }

        .dialog-buttons {
            display: flex;
            justify-content: space-between;
            margin-top: 20px;
        }

        .btn-dialog {
            padding: 10px 18px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.3s ease;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .btn-save {
            background: linear-gradient(to right, #11998e, #38ef7d);
            box-shadow: 0 4px 10px rgba(17, 153, 142, 0.3);
        }

            .btn-save:hover {
                background: linear-gradient(to right, #38ef7d, #11998e);
                transform: translateY(-2px);
                box-shadow: 0 6px 15px rgba(17, 153, 142, 0.4);
            }

        .btn-cancel {
            background: linear-gradient(to right, #ED213A, #FF8177);
            box-shadow: 0 4px 10px rgba(237, 33, 58, 0.3);
        }

            .btn-cancel:hover {
                background: linear-gradient(to right, #FF8177, #ED213A);
                transform: translateY(-2px);
                box-shadow: 0 6px 15px rgba(237, 33, 58, 0.4);
            }

        .btn-delete-confirm {
            background: linear-gradient(to right, #ED213A, #FF8177);
            box-shadow: 0 4px 10px rgba(237, 33, 58, 0.3);
        }

            .btn-delete-confirm:hover {
                background: linear-gradient(to right, #FF8177, #ED213A);
                transform: translateY(-2px);
                box-shadow: 0 6px 15px rgba(237, 33, 58, 0.4);
            }

        .btn-icon-dialog {
            margin-right: 8px;
        }

        .dialog-alert {
            color: #777;
            font-size: 14px;
            margin-top: 15px;
            text-align: center;
        }

        .table-responsive {
            width: 100%;
            overflow-x: auto;
        }

        /* Modal styles */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 10000;
            overflow-y: auto;
        }

        .modal-content {
            background: #fff;
            margin: 50px auto;
            padding: 30px;
            border-radius: 10px;
            width: 90%;
            max-width: 1000px;
            box-shadow: 0px 5px 15px rgba(0,0,0,0.3);
            position: relative;
        }

            .modal-content h3 {
                margin-bottom: 20px;
                text-align: center;
            }

        .close {
            position: absolute;
            top: 15px;
            right: 20px;
            font-size: 22px;
            cursor: pointer;
        }

        /* Auto attendance */
        .auto-attendance-container {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-bottom: 15px;
        }

        .auto-attendance-btn {
            padding: 8px 14px;
            font-weight: bold;
            border-radius: 5px;
            border: none;
            cursor: pointer;
            color: #fff;
            background: linear-gradient(to right, #4776E6, #8E54E9);
            box-shadow: 0 2px 8px rgba(71, 118, 230, 0.3);
            transition: all 0.3s ease;
        }

            .auto-attendance-btn:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(71, 118, 230, 0.4);
            }

        .btn-present {
            background: linear-gradient(to right, #11998e, #38ef7d);
        }

        .btn-absent {
            background: linear-gradient(to right, #ED213A, #FF8177);
        }

        .student-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 10px;
        }

            .student-table th,
            .student-table td {
                padding: 12px;
                border: 1px solid #ddd;
                text-align: center;
            }

        /* Responsive styles */
        @@media only screen and (max-width: 768px) {
            .container-custom {
                padding: 20px;
                margin: 10px;
            }

            h2 {
                font-size: 20px;
                margin-bottom: 15px;
            }

            th, td {
                padding: 10px;
                font-size: 12px;
            }

            .btn-add {
                padding: 8px 12px;
                font-size: 12px;
            }

            .dialog-box {
                width: 90%;
                padding: 15px;
            }

            .search-container {
                flex-direction: column;
                align-items: flex-start;
            }

            .search-box {
                width: 100%;
                max-width: 100%;
                margin-bottom: 15px;
            }

            .table-responsive {
                overflow-x: auto;
            }
        }

    </style>
</head>
<body>
    <div class="container-custom" id="container-view">
        <h2><i class="fas fa-users"></i> User Management</h2>

        <!-- Create user button centered -->
        <!-- Create user button centered -->
        <div style="text-align: center; margin-bottom: 20px;">
            <button class="btn-add" onclick="openCreateDialog()" style="float:right ">
                <i class="fas fa-plus-circle" style="margin-right: 5px;"></i> Create User
            </button>
        </div>
        <br>
        <br>


        <h2><i class="fas fa-user-graduate"></i> Student List</h2>
        <div class="search-container">
            <div class="search-box">
                <i class="fas fa-search search-icon"></i>
                <input type="text" id="studentSearch" class="search-input" placeholder="Search students...">
            </div>
        </div>

        <div class="table-responsive">
            <table class="table user-table" id="students-table">
                <thead>
                    <tr>
                        <th>Order</th>
                        <th>Username</th>
                        <th>Email</th>
                        <th>Role</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Example data row for visualization -->
                    <tr>
                    </tr>
                    <!-- Data will be loaded via Fetch -->
                </tbody>
            </table>
        </div>

        <h2><i class="fas fa-chalkboard-teacher"></i> Teacher List</h2>
        <div class="search-container">
            <div class="search-box">
                <i class="fas fa-search search-icon"></i>
                <input type="text" id="teacherSearch" class="search-input" placeholder="Search teachers...">
            </div>
        </div>

        <div class="table-responsive">
            <table class="table user-table" id="teachers-table">
                <thead>
                    <tr>
                        <th>Order</th>
                        <th>Username</th>
                        <th>Email</th>
                        <th>Role</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Example data row for visualization -->
                    <tr>
                    </tr>
                    <!-- Data will be loaded via Fetch -->
                </tbody>
            </table>
        </div>
    </div>

    <!-- Create Dialog -->
    <div id="createDialog" style="display:none;" class="dialog-overlay">
        <div class="dialog-box">
            <h3><i class="fas fa-plus-circle"></i> Create User</h3>
            <form id="createForm">
                <label>Email:</label>
                <input type="email" id="newUserEmail" required placeholder="Enter email" />

                <label>Username:</label>
                <input type="text" id="newUserUsername" required placeholder="Enter username" />

                <label>Password:</label>
                <input type="password" id="newUserPassword" required placeholder="Enter password" />

                <label>Role:</label>
                <select id="newUserRole">
                    <option value="student">Student</option>
                    <option value="teacher">Teacher</option>
                </select>

                <div class="dialog-buttons">
                    <button type="submit" class="btn-dialog btn-save">
                        <i class="fas fa-save btn-icon-dialog"></i> Create
                    </button>
                    <button type="button" class="btn-dialog btn-cancel" onclick="$('#createDialog').hide()">
                        <i class="fas fa-times btn-icon-dialog"></i> Cancel
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Edit Dialog -->
    <div id="editDialog" style="display:none;" class="dialog-overlay">
        <div class="dialog-box">
            <h3><i class="fas fa-edit"></i> Edit User</h3>
            <form id="editForm">
                <input type="hidden" id="userTypeEdit" />
                <input type="hidden" id="userIdEdit" />

                <label>Username:</label>
                <input type="text" id="userNameEdit" required placeholder="Enter username" />

                <label>Email:</label>
                <input type="email" id="userEmailEdit" required placeholder="Enter email" />

                <label>Role:</label>
                <select id="userRoleEdit">
                    <option value="student">Student</option>
                    <option value="teacher">Teacher</option>
                </select>

                <div class="dialog-buttons">
                    <button type="submit" class="btn-dialog btn-save">
                        <i class="fas fa-save btn-icon-dialog"></i> Save
                    </button>
                    <button type="button" class="btn-dialog btn-cancel" onclick="$('#editDialog').hide()">
                        <i class="fas fa-times btn-icon-dialog"></i> Cancel
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Delete Dialog -->
    <div id="deleteDialog" style="display:none;" class="dialog-overlay">
        <div class="dialog-box">
            <h3><i class="fas fa-trash-alt"></i> Delete User</h3>
            <input type="hidden" id="userTypeDelete" />
            <input type="hidden" id="userIdDelete" />

            <label>Username:</label>
            <input type="text" id="userNameDelete" readonly />

            <label>Email:</label>
            <input type="email" id="userEmailDelete" readonly />

            <div class="dialog-alert">
                <i class="fas fa-exclamation-triangle" style="color: #ED213A;"></i>
                Are you sure you want to delete this user?
            </div>

            <div class="dialog-buttons">
                <button class="btn-dialog btn-delete-confirm" onclick="confirmDelete()">
                    <i class="fas fa-trash-alt btn-icon-dialog"></i> Delete
                </button>
                <button class="btn-dialog btn-cancel" onclick="$('#deleteDialog').hide()">
                    <i class="fas fa-times btn-icon-dialog"></i> Cancel
                </button>
            </div>
        </div>
    </div>

    <!-- Schedule Dialog -->
    <div id="scheduleDialog" style="display:none;" class="dialog-overlay">
        <div class="dialog-box" style="width: 90%; max-width: 1000px;">
            <h3><i class="fas fa-calendar-alt"></i> Schedule List</h3>
            <div class="search-container">
                <div class="search-box">
                    <i class="fas fa-search search-icon"></i>
                    <input type="text" id="scheduleSearch" class="search-input" placeholder="Search schedules...">
                </div>
            </div>
            <div class="table-responsive">
                <table class="table schedules-table" id="schedules-table">
                    <thead>
                        <tr>
                            <th>Order</th>
                            <th>Subject</th>
                            <th>Start Time</th>
                            <th>End Time</th>
                            <th>Class</th>
                            <th>Student Count</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Data will be loaded via Fetch -->
                    </tbody>
                </table>
            </div>
            <div class="dialog-buttons" style="justify-content: center;">
                <button class="btn-dialog btn-cancel" onclick="$('#scheduleDialog').hide()">
                    <i class="fas fa-times btn-icon-dialog"></i> Close
                </button>
            </div>
        </div>
    </div>
         
    <!-- Attendance Modal -->
    <div id="attendanceModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeAttendanceModal()">×</span>
            <h3 id="modalTitle"><i class="fas fa-clipboard-check"></i> <span id="subjectName"></span></h3>
            <div class="auto-attendance-container">
                <button class="auto-attendance-btn btn-present" onclick="autoAttendanceAll('present')">
                    <i class="fas fa-check"></i> All Present
                </button>
                <button class="auto-attendance-btn btn-absent" onclick="autoAttendanceAll('absent')">
                    <i class="fas fa-times"></i> All Absent
                </button>
                <button class="auto-attendance-btn" onclick="saveAttendance()">
                    <i class="fas fa-save"></i> Save Attendance
                </button>
            </div>
            <div id="studentList" class="student-list">
                <table class="student-table">
                    <thead>
                        <tr>
                            <th width="10%">Order</th>
                            <th width="30%">Full Name</th>
                            <th width="30%">Present</th>
                            <th width="30%">Absent</th>
                        </tr>
                    </thead>
                    <tbody id="studentTableBody">
                        <!-- Rows rendered by JS -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    

    @section Scripts {
        <script>
            let students = [];
            // Create a toast notification function
            function showToast(message, type = 'info') {
                // Remove any existing toast
                const existingToast = document.querySelector('.custom-toast');
                if (existingToast) {
                    existingToast.remove();
                }

                // Create toast element
                const toast = document.createElement('div');
                toast.className = `custom-toast toast-${type}`;

                // Set icon based on type
                let icon = 'fa-info-circle';
                if (type === 'success') icon = 'fa-check-circle';
                if (type === 'error') icon = 'fa-exclamation-circle';
                if (type === 'warning') icon = 'fa-exclamation-triangle';

                toast.innerHTML = `
                    <i class="fas ${icon}"></i>
                    <span>${message}</span>
                    <button onclick="this.parentElement.remove()"><i class="fas fa-times"></i></button>
                `;

                document.body.appendChild(toast);

                // Auto dismiss after 5 seconds
                setTimeout(() => {
                    if (toast.parentElement) {
                        toast.classList.add('toast-hiding');
                        setTimeout(() => toast.remove(), 500);
                    }
                }, 5000);
            }

            // Open Attendance List
            function openAttendanceModal(subjectName, scheduleId, className) {
                const modal = document.getElementById('attendanceModal');
                const subjectNameSpan = document.getElementById('subjectName');
                const studentTableBody = document.getElementById('studentTableBody');

                subjectNameSpan.textContent = `${subjectName} - ${className}`;
                studentTableBody.innerHTML = '';

                fetch(`http://localhost:5243/api/TimeTableForTeacher/schedule/${scheduleId}/students`, {
                    method: 'GET',
                    headers: {
                        'Authorization': 'Bearer ' + localStorage.getItem('token'),
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (!Array.isArray(data)) {
                        showToast("API trả về dữ liệu không hợp lệ.", "error");
                        // Chờ 1.5 giây (1500ms) trước khi thực hiện tiếp
                            setTimeout(function () {
                                $("#editDialog").hide();
                                loadUsers();
                            }, 1500);
                        return;
                    }
                    students = data;
                    if (students.length === 0) {
                        studentTableBody.innerHTML = `<tr><td colspan="5">Chưa có danh sách sinh viên.</td></tr>`;
                    } else {
                        students.forEach((student, index) => {
                            if (student.isArrive === true) {
                                student.isPresent = true;
                                student.isAbsent = false;
                            } else if (student.isArrive === false) {
                                student.isPresent = false;
                                student.isAbsent = true;
                            } else {
                                student.isPresent = false;
                                student.isAbsent = false;
                            }

                            const row = document.createElement('tr');
                            row.innerHTML = `
                                <td>${index + 1}</td>
                                <td>${student.fullName}</td>
                                <td>
                                    <div class="attendance-option">
                                        <input type="checkbox"
                                               id="present_${student.us_id}"
                                               ${student.isPresent ? 'checked' : ''}
                                               onchange="updateCheckboxState('${student.us_id}', 'present')">
                                        <label for="present_${student.us_id}">Có mặt</label>
                                    </div>
                                </td>
                                <td>
                                    <div class="attendance-option">
                                        <input type="checkbox"
                                               id="absent_${student.us_id}"
                                               ${student.isAbsent ? 'checked' : ''}
                                               onchange="updateCheckboxState('${student.us_id}', 'absent')">
                                        <label for="absent_${student.us_id}">Vắng</label>
                                    </div>
                                </td>
                            `;
                            studentTableBody.appendChild(row);
                        });
                    }
                })
                .catch(error => {
                    console.error(error);
                    showToast("Đã có lỗi xảy ra khi lấy danh sách sinh viên.", "error");
                    // Chờ 1.5 giây (1500ms) trước khi thực hiện tiếp
                            setTimeout(function () {
                                $("#editDialog").hide();
                                loadUsers();
                            }, 1500);
                });

                modal.style.display = 'block';
            }

            async function saveAttendance() {
                const scheduleId = window.localStorage.getItem("schedule_id");

                const updates = students
                    .filter(s => s.isPresent || s.isAbsent)
                    .map(s => ({
                        user_id: s.us_id,
                        schedule_id: scheduleId,
                        isArrive: s.isPresent ? true : false
                    }));

                if (updates.length === 0) {
                    showToast("⚠️ Bạn chưa đánh dấu điểm danh cho sinh viên nào.", "warning");
                    // Chờ 1.5 giây (1500ms) trước khi thực hiện tiếp
                            setTimeout(function () {
                                $("#editDialog").hide();
                                loadUsers();
                            }, 1500);
                    return;
                }

                try {
                    for (const update of updates) {
                        const response = await fetch(`http://localhost:5243/api/Schedule/UpdateStatusArrive`, {
                            method: "POST",
                            headers: {
                                'Authorization': 'Bearer ' + localStorage.getItem('token'),
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(update)
                        });

                        const result = await response.json();

                        if (!response.ok || result.success !== true) {
                            throw new Error(`❌ Lỗi cập nhật user ${update.user_id}: ${result.message || 'Không rõ lỗi'}`);
                        }
                    }

                    showToast("Đã lưu điểm danh cho tất cả học sinh!", "success");
                    // Chờ 1.5 giây (1500ms) trước khi thực hiện tiếp
                            setTimeout(function () {
                                $("#editDialog").hide();
                                loadUsers();
                            }, 1500);
                    closeAttendanceModal();
                    location.reload(); // 🔄 Tải lại trang sau khi đóng modal
                } catch (err) {
                    console.error("Lỗi khi lưu điểm danh:", err);
                    showToast("Có lỗi xảy ra khi lưu điểm danh.", "error");
                    // Chờ 1.5 giây (1500ms) trước khi thực hiện tiếp
                            setTimeout(function () {
                                $("#editDialog").hide();
                                loadUsers();
                            }, 1500);
                }
            }


            function updateCheckboxState(studentId, changedField) {
                students = students.map(s => {
                    if (s.us_id === studentId) {
                        s.isPresent = false;
                        s.isAbsent = false;

                        if (changedField === 'present') {
                            s.isPresent = document.getElementById(`present_${studentId}`).checked;
                        } else if (changedField === 'absent') {
                            s.isAbsent = document.getElementById(`absent_${studentId}`).checked;
                        }

                        document.getElementById(`present_${studentId}`).checked = s.isPresent;
                        document.getElementById(`absent_${studentId}`).checked = s.isAbsent;
                    }
                    return s;
                });
            }

            function autoAttendanceAll(type) {
                students.forEach(s => {
                    s.isPresent = false;
                    s.isAbsent = false;

                    if (type === 'present') s.isPresent = true;
                    if (type === 'absent')  s.isAbsent = true;

                    document.getElementById(`present_${s.us_id}`).checked = s.isPresent;
                    document.getElementById(`absent_${s.us_id}`).checked  = s.isAbsent;
                });
            }

            function closeAttendanceModal() {
                document.getElementById('attendanceModal').style.display = 'none';
            }

            function redirectToBetaAi() {
                closeAttendanceModal();
                window.location.href = '/Home/BetaAi';
            }

            function getCurrentDate() {
                const now = new Date();
                return `${now.getFullYear()}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}`;
            }

            window.onclick = function(e) {
                const modal = document.getElementById('attendanceModal');
                if (e.target === modal) {
                    closeAttendanceModal();
                }
            };

            function updateStatusArrive(user_id, schedule_id, isArrive) {
                fetch("http://localhost:5243/api/Schedule/UpdateStatusArrive", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({
                        user_id: user_id,
                        schedule_id: schedule_id,
                        isArrive: isArrive
                    })
                })
                .then(response => {
                    if (!response.ok) throw new Error("Cập nhật thất bại");
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        showToast("Trạng thái đã được cập nhật!", "success");
                        // Chờ 1.5 giây (1500ms) trước khi thực hiện tiếp
                            setTimeout(function () {
                                $("#editDialog").hide();
                                loadUsers();
                            }, 1500);
                    } else {
                        showToast(data.message, "error");
                        // Chờ 1.5 giây (1500ms) trước khi thực hiện tiếp
                            setTimeout(function () {
                                $("#editDialog").hide();
                                loadUsers();
                            }, 1500);
                    }
                })
                .catch(error => {
                    console.error("Lỗi khi gọi API cập nhật:", error);
                    showToast("Có lỗi xảy ra khi cập nhật trạng thái.", "error");
                    // Chờ 1.5 giây (1500ms) trước khi thực hiện tiếp
                            setTimeout(function () {
                                $("#editDialog").hide();
                                loadUsers();
                            }, 1500);
                });
            }

            function setupTableSearch(inputId, tableId) {
                $(`#${inputId}`).on("keyup", function () {
                    const value = $(this).val().toLowerCase();
                    $(`#${tableId} tbody tr`).filter(function () {
                        $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1);
                    });
                });
            }

            // Gọi khi tài liệu sẵn sàng
            $(document).ready(function () {
                setupTableSearch("studentSearch", "students-table");
                setupTableSearch("teacherSearch", "teachers-table");
                setupTableSearch("scheduleSearch", "schedules-table");
                // Add toast styles to page
                const style = document.createElement('style');
                style.textContent = `
                    .custom-toast {
                        position: fixed;
                        top: 20px;
                        right: 20px;
                        padding: 12px 20px;
                        border-radius: 8px;
                        box-shadow: 0 5px 15px rgba(0,0,0,0.2);
                        display: flex;
                        align-items: center;
                        min-width: 300px;
                        z-index: 10000;
                        animation: slideIn 0.3s ease forwards;
                        color: white;
                    }

                    .toast-info {
                        background: linear-gradient(to right, #4776E6, #8E54E9);
                    }

                    .toast-success {
                        background: linear-gradient(to right, #11998e, #38ef7d);
                    }

                    .toast-error {
                        background: linear-gradient(to right, #ED213A, #FF8177);
                    }

                    .toast-warning {
                        background: linear-gradient(to right, #f7b733, #fc4a1a);
                    }

                    .custom-toast i {
                        margin-right: 12px;
                        font-size: 18px;
                    }

                    .custom-toast span {
                        flex-grow: 1;
                        font-weight: 500;
                    }

                    .custom-toast button {
                        background: transparent;
                        border: none;
                        color: white;
                        cursor: pointer;
                        opacity: 0.8;
                        transition: opacity 0.2s;
                    }

                    .custom-toast button:hover {
                        opacity: 1;
                    }

                    .toast-hiding {
                        animation: slideOut 0.5s ease forwards;
                    }

            @@keyframes slideIn {
                        from {
                            transform: translateX(100%);
                            opacity: 0;
                        }
                        to {
                            transform: translateX(0);
                            opacity: 1;
                        }
                    }

            @@keyframes slideOut {
                        from {
                            transform: translateX(0);
                            opacity: 1;
                        }
                        to {
                            transform: translateX(100%);
                            opacity: 0;
                        }
                    }
                `;
                document.head.appendChild(style);
            });

            function getSchedule(user_id, user_role) {
                window.localStorage.setItem("user_id", user_id);
                window.localStorage.setItem("user_role", user_role);
                fetch(`http://localhost:5243/api/Schedule/GetSchedulesByUser/${user_id}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => {
                    if (!response.ok) throw new Error('Network response was not ok');
                    return response.json();
                })
                .then(async data => {
                    const tableBody = document.querySelector("#schedules-table tbody");
                    tableBody.innerHTML = ""; // clear bảng cũ
                    data.sort((a, b) => new Date(a.scStarttime) - new Date(b.scStarttime));

                    if (data.length === 0) {
                        const row = document.createElement("tr");
                        row.innerHTML = `<td colspan="7" style="text-align:center;">- No schedules for this user 🙁 -</td>`;
                        tableBody.appendChild(row);
                    } else {
                            for (let [index, item] of data.entries()) {
                                const row = document.createElement("tr");

                                const now = new Date();
                                const startTime = new Date(item.scStarttime);

                                // Dùng biến này để xác định logic, không chứa thẻ HTML
                                let rawStatus = "Not yet";

                                if (user_role === "teacher") {
                                    if (startTime <= now) {
                                        rawStatus = "Passed";
                                    }
                                } else if (user_role === "student") {
                                    if (startTime <= now) {
                                        const isArrive = await fetchIsArrive(user_id, item.scId);
                                        if (isArrive === true) {
                                            rawStatus = "Arrived";
                                        } else if (isArrive === false) {
                                            rawStatus = "Not Arrived";
                                        } else {
                                            rawStatus = "Unknown";
                                        }
                                    }
                                }

                                // Thêm thẻ <b> cho phần hiển thị
                                const statusText = `<b>${rawStatus}</b>`;

                                row.innerHTML = `
                                    <td>${index + 1}</td>
                                    <td>${item.subjectName}</td>
                                    <td>${formatDate(item.scStarttime)}</td>
                                    <td>${formatDate(item.scEndtime)}</td>
                                    <td>${item.className}</td>
                                    <td>${item.scNumstudent}</td>
                                    <td>${statusText}</td>
                                `;

                                console.log(JSON.stringify(item));

                                if (rawStatus !== "Not yet") {
                                    row.onclick = () => {
                                        console.log("🆔 Clicked schedule_id: ", item.scId);
                                        window.localStorage.setItem("schedule_id", item.scId);
                                        openAttendanceModal(item.subjectName, item.scId, item.className);
                                    };
                                } else {
                                    // Tùy chọn: làm mờ hàng chưa đến giờ
                                    row.style.opacity = 0.5;
                                    row.style.cursor = "not-allowed";
                                }

                            tableBody.appendChild(row);
                        }
                    }

                    $("#scheduleDialog").show();
                })
                .catch(error => {
                    console.error("Error fetching schedule: " + JSON.stringify(error));
                    showToast("Không thể tải lịch học!", "error");
                    // Chờ 1.5 giây (1500ms) trước khi thực hiện tiếp
                            setTimeout(function () {
                                $("#editDialog").hide();
                                loadUsers();
                            }, 1500);
                });
            }

            function fetchIsArrive(userId, scheduleId) {
                return fetch(`http://localhost:5243/api/Schedule/GetIsArrive?user_id=${userId}&schedule_id=${scheduleId}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => {
                    if (!response.ok) throw new Error("Không tìm thấy isArrive");
                    return response.json();
                })
                .then(data => data.isArrive)
                .catch(error => {
                    console.error("Lỗi khi lấy isArrive:", error);
                    return null; // hoặc false nếu bạn muốn default
                });
            }

            function formatDate(dateString) {
                const options = {
                    year: 'numeric', month: '2-digit', day: '2-digit',
                    hour: '2-digit', minute: '2-digit'
                };
                return new Date(dateString).toLocaleString(undefined, options);
            }

            document.addEventListener('DOMContentLoaded', function () {
                loadUsers();
            });

            function loadUsers() {
                // Gọi API để lấy danh sách sinh viên
                fetch('http://localhost:5243/api/User/students', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => {
                    if (!response.ok) throw new Error('Network response was not ok (students)');
                    return response.json();
                })
                .then(data => {
                    populateStudents(data);
                })
                .catch(error => {
                    console.error("Error fetching students: " + error);
                    showToast("Không thể lấy sinh viên!", "error");
                    // Chờ 1.5 giây (1500ms) trước khi thực hiện tiếp
                            setTimeout(function () {
                                $("#editDialog").hide();
                                loadUsers();
                            }, 1500);
                });

                // Gọi API để lấy danh sách giáo viên
                fetch('http://localhost:5243/api/User/teachers', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => {
                    if (!response.ok) throw new Error('Network response was not ok (teachers)');
                    return response.json();
                })
                .then(data => {
                    populateTeachers(data);
                })
                .catch(error => {
                    console.error("Error fetching teachers: " + error);
                    showToast("Không thể lấy giáo viên!", "error");
                    // Chờ 1.5 giây (1500ms) trước khi thực hiện tiếp
                            setTimeout(function () {
                                $("#editDialog").hide();
                                loadUsers();
                            }, 1500);
                });
            }

            function populateStudents(data) {
                const studentTableBody = document.querySelector('#students-table tbody');
                let studentRows = '';

                if (!Array.isArray(data)) {
                    showToast("Dữ liêu trả về lỗi!", "error");
                    // Chờ 1.5 giây (1500ms) trước khi thực hiện tiếp
                            setTimeout(function () {
                                $("#editDialog").hide();
                                loadUsers();
                            }, 1500);
                    return;
                }

                data.forEach((user, index) => {
                    const row = `
                        <tr>
                            <td class="data-user" onclick="getSchedule('${user.usId}', '${user.usRole}')">${index + 1}</td>
                            <td class="data-user" onclick="getSchedule('${user.usId}', '${user.usRole}')">${user.usUsername}</td>
                            <td class="data-user" onclick="getSchedule('${user.usId}', '${user.usRole}')">${user.usEmail}</td>
                            <td class="data-user" onclick="getSchedule('${user.usId}', '${user.usRole}')">${user.usRole}</td>
                            <td>
                                <button class="btn-action btn-edit" onclick="openEditDialog(0, '${user.usId}', '${user.usUsername}', '${user.usEmail}', '${user.usRole}')">✏️ Edit</button>
                                <button class="btn-action btn-delete" onclick="openDeleteDialog(0, '${user.usId}', '${user.usUsername}', '${user.usEmail}', '${user.usRole}')">❌ Delete</button>
                            </td>
                        </tr>`;
                    studentRows += row;
                });
                studentTableBody.innerHTML = studentRows || '<tr><td colspan="5">Không có sinh viên</td></tr>';
            }

            function populateTeachers(data) {
                const teacherTableBody = document.querySelector('#teachers-table tbody');
                let teacherRows = '';

                if (!Array.isArray(data)) {
                    showToast("Dữ liệu giáo viên trả về không hợp lệ!", "error");
                    // Chờ 1.5 giây (1500ms) trước khi thực hiện tiếp
                            setTimeout(function () {
                                $("#editDialog").hide();
                                loadUsers();
                            }, 1500);
                    return;
                }

                data.forEach((user, index) => {
                    const row = `
                        <tr>
                            <td class="data-user" onclick="getSchedule('${user.usId}', '${user.usRole}')">${index + 1}</td>
                            <td class="data-user" onclick="getSchedule('${user.usId}', '${user.usRole}')">${user.usUsername}</td>
                            <td class="data-user" onclick="getSchedule('${user.usId}', '${user.usRole}')">${user.usEmail}</td>
                            <td class="data-user" onclick="getSchedule('${user.usId}', '${user.usRole}')">${user.usRole}</td>
                            <td>
                                <button class="btn-action btn-edit" onclick="openEditDialog(1, '${user.usId}', '${user.usUsername}', '${user.usEmail}', '${user.usRole}')">✏️ Edit</button>
                                <button class="btn-action btn-delete" onclick="openDeleteDialog(1, '${user.usId}', '${user.usUsername}', '${user.usEmail}', '${user.usRole}')">❌ Delete</button>
                            </td>
                        </tr>`;
                    teacherRows += row;
                });
                teacherTableBody.innerHTML = teacherRows || '<tr><td colspan="5">Không có giáo viên</td></tr>';
            }

            function openCreateDialog() {
                $("#newUserEmail").val('');
                $("#newUserUsername").val('');
                $("#newUserPassword").val('');
                $("#newUserRole").val('student');
                $("#createDialog").show();
            }

            // Tạo user mới từ create dialog
            document.getElementById("createForm").addEventListener("submit", function(e) {
                e.preventDefault();

                const newUser = {
                    usEmail: $("#newUserEmail").val(),
                    usUsername: $("#newUserUsername").val(),
                    usPassword: $("#newUserPassword").val(),
                    usRole: $("#newUserRole").val()
                };

                fetch('http://localhost:5243/api/User/Create', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(newUser)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showToast(data.message, "success");
                        // Chờ 1.5 giây (1500ms) trước khi thực hiện tiếp
                            setTimeout(function () {
                                $("#editDialog").hide();
                                loadUsers();
                            }, 1500);
                        $("#createDialog").hide();
                        loadUsers();
                    } else {
                        showToast("Tạo user thất bại: " + (data.message || (Array.isArray(data.errors) ? data.errors.join(", ") : "")), "error");
                        // Chờ 1.5 giây (1500ms) trước khi thực hiện tiếp
                            setTimeout(function () {
                                $("#editDialog").hide();
                                loadUsers();
                            }, 1500);
                    }
                })
                .catch(error => {
                    console.error("Lỗi khi tạo user:", error);
                    showToast("Có lỗi xảy ra khi tạo user: " + error, "error");
                    // Chờ 1.5 giây (1500ms) trước khi thực hiện tiếp
                            setTimeout(function () {
                                $("#editDialog").hide();
                                loadUsers();
                            }, 1500);
                });
            });

            function openEditDialog(userType, userId, username, email, role) {
                $("#userTypeEdit").val(userType);
                $("#userIdEdit").val(userId);
                $("#userNameEdit").val(username);
                $("#userEmailEdit").val(email);
                $("#userRoleEdit").val(role);
                $("#editDialog").show();
            }

            function openDeleteDialog(userType, userId, username, email, role) {
                $("#userTypeDelete").val(userType);
                $("#userIdDelete").val(userId);
                $("#userNameDelete").val(username);
                $("#userEmailDelete").val(email);
                $("#deleteDialog").show();
            }

            // Xử lý submit form Edit
            document.getElementById("editForm").addEventListener("submit", function (e) {
                e.preventDefault();

                const userId = $("#userIdEdit").val();
                const updatedUser = {
                    usUsername: $("#userNameEdit").val(),
                    usEmail: $("#userEmailEdit").val(),
                    usRole: $("#userRoleEdit").val()
                };

                fetch(`http://localhost:5243/api/User/Edit/${userId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(updatedUser)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showToast(data.message, "success");
                        // Chờ 1.5 giây (1500ms) trước khi thực hiện tiếp
                            setTimeout(function () {
                                $("#editDialog").hide();
                                loadUsers();
                            }, 1500);
                        $("#editDialog").hide();
                        loadUsers();
                    } else {
                        showToast("Cập nhật thất bại: " + (data.message || (Array.isArray(data.errors) ? data.errors.join(", ") : "")), "error");
                        // Chờ 1.5 giây (1500ms) trước khi thực hiện tiếp
                            setTimeout(function () {
                                $("#editDialog").hide();
                                loadUsers();
                            }, 1500);
                    }
                })
                .catch(error => {
                    console.error("Lỗi khi cập nhật:", error);
                    showToast("Có lỗi xảy ra khi cập nhật người dùng: " + error, "error");
                    // Chờ 1.5 giây (1500ms) trước khi thực hiện tiếp
                            setTimeout(function () {
                                $("#editDialog").hide();
                                loadUsers();
                            }, 1500);
                });
            });

            // Hàm xác nhận xóa người dùng
            function confirmDelete() {
                const userId = $("#userIdDelete").val();

                fetch(`http://localhost:5243/api/User/Delete/${userId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showToast("Xóa thành công", "error");
                        // Chờ 1.5 giây (1500ms) trước khi thực hiện tiếp
                            setTimeout(function () {
                                $("#editDialog").hide();
                                loadUsers();
                            }, 1500);
                        $("#deleteDialog").hide();
                        loadUsers();
                    } else {
                        showToast("Xóa thất bại: " + data.message, "error");
                        // Chờ 1.5 giây (1500ms) trước khi thực hiện tiếp
                            setTimeout(function () {
                                $("#editDialog").hide();
                                loadUsers();
                            }, 1500);
                    }
                })
                .catch(error => {
                    console.error("Lỗi khi xóa:", error);
                    showToast("Có lỗi xảy ra khi xóa người dùng: " + error, "error");
                    // Chờ 1.5 giây (1500ms) trước khi thực hiện tiếp
                            setTimeout(function () {
                                $("#editDialog").hide();
                                loadUsers();
                            }, 1500);
                });
            }
        </script>
    }
</body>

